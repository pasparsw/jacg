from logging import getLogger
from typing import Callable

from api_connectors.connectors.api_connector_interface import ApiConnectorInterface

@[for command_model in model.commands]@
from @command_model.request.import_path import @command_model.request.name
from @command_model.response.import_path import @command_model.response.name
@[end for]
# request serializers
@[for command_model in model.commands]@
from request_serializers.@camel_case_to_snake_case(command_model.request.name)@ _serializer import @command_model.request.name@ Serializer
@[end for]
# response deserializers
@[for command_model in model.commands]@
from response_deserializers.@camel_case_to_snake_case(command_model.response.name)@ _deserializer import @command_model.response.name@ Deserializer
@[end for]

LOGGER = getLogger("@snake_case_to_camel_case(model.name)@ Client")

def log_debug(message: str, is_silent: bool) -> None:
    if is_silent:
        return
    LOGGER.debug(message)


class @snake_case_to_camel_case(model.name)@ Client:
    def __init__(self, api_connector: ApiConnectorInterface, response_validation_cb: Callable[[dict], None] = None):
        self.__validate_response: Callable[[dict], None] = response_validation_cb
        self.__api_connector: ApiConnectorInterface = api_connector

    def connect(self) -> None:
        self.__api_connector.connect(hostname="@model.hostname@ ",
                                     port=@model.port@ ,
                                     response_buffer_size=@model.response_buffer_size@ ,
                                     response_timeout=@model.response_timeout@ ,
                                     socket_timeout=@model.socket_timeout@ )

@[for command_model in model.commands]@
    def @command_model.py_function_name@ (self, request: @command_model.request.name@ ) -> @command_model.response.name@ :
        log_debug(f"Serializing request: {request}", is_silent=@command_model.is_silent@ )
        serialized_request: dict = @command_model.request.name@ Serializer.serialize(request)

        log_debug(f"Sending request {serialized_request}", is_silent=@command_model.is_silent@ )
        serialized_response: dict = self.__api_connector.send(serialized_request)

        log_debug(f"Received response: {serialized_response}", is_silent=@command_model.is_silent@ )
        self.__call_response_validation_cb(serialized_response)

        deserialized_response: @command_model.response.name@  = @command_model.response.name@ Deserializer.deserialize(serialized_response)
        log_debug(f"Deserialized response: {deserialized_response}", is_silent=@command_model.is_silent@ )

        return deserialized_response

@[end for]@

    def __call_response_validation_cb(self, serialized_response: dict) -> None:
        if self.__validate_response:
            self.__validate_response(serialized_response)
